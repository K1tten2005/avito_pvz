// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/pvz/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/K1tten2005/avito_pvz/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/uuid"
)

// MockPvzRepo is a mock of PvzRepo interface.
type MockPvzRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPvzRepoMockRecorder
}

// MockPvzRepoMockRecorder is the mock recorder for MockPvzRepo.
type MockPvzRepoMockRecorder struct {
	mock *MockPvzRepo
}

// NewMockPvzRepo creates a new mock instance.
func NewMockPvzRepo(ctrl *gomock.Controller) *MockPvzRepo {
	mock := &MockPvzRepo{ctrl: ctrl}
	mock.recorder = &MockPvzRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPvzRepo) EXPECT() *MockPvzRepoMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockPvzRepo) AddProduct(ctx context.Context, product *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockPvzRepoMockRecorder) AddProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockPvzRepo)(nil).AddProduct), ctx, product)
}

// CreateReception mocks base method.
func (m *MockPvzRepo) CreateReception(ctx context.Context, reception models.Reception) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, reception)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockPvzRepoMockRecorder) CreateReception(ctx, reception interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockPvzRepo)(nil).CreateReception), ctx, reception)
}

// DeleteProduct mocks base method.
func (m *MockPvzRepo) DeleteProduct(ctx context.Context, productId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockPvzRepoMockRecorder) DeleteProduct(ctx, productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockPvzRepo)(nil).DeleteProduct), ctx, productId)
}

// GetActiveReception mocks base method.
func (m *MockPvzRepo) GetActiveReception(ctx context.Context, pvzId uuid.UUID) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveReception", ctx, pvzId)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveReception indicates an expected call of GetActiveReception.
func (mr *MockPvzRepoMockRecorder) GetActiveReception(ctx, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveReception", reflect.TypeOf((*MockPvzRepo)(nil).GetActiveReception), ctx, pvzId)
}

// GetLastProduct mocks base method.
func (m *MockPvzRepo) GetLastProduct(ctx context.Context, pvzID uuid.UUID) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastProduct", ctx, pvzID)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastProduct indicates an expected call of GetLastProduct.
func (mr *MockPvzRepoMockRecorder) GetLastProduct(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastProduct", reflect.TypeOf((*MockPvzRepo)(nil).GetLastProduct), ctx, pvzID)
}

// GetPvz mocks base method.
func (m *MockPvzRepo) GetPvz(ctx context.Context, startDate, endDate *time.Time, page, limit int) ([]models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvz", ctx, startDate, endDate, page, limit)
	ret0, _ := ret[0].([]models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvz indicates an expected call of GetPvz.
func (mr *MockPvzRepoMockRecorder) GetPvz(ctx, startDate, endDate, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvz", reflect.TypeOf((*MockPvzRepo)(nil).GetPvz), ctx, startDate, endDate, page, limit)
}

// GetReceptionByID mocks base method.
func (m *MockPvzRepo) GetReceptionByID(ctx context.Context, id uuid.UUID) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceptionByID", ctx, id)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceptionByID indicates an expected call of GetReceptionByID.
func (mr *MockPvzRepoMockRecorder) GetReceptionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceptionByID", reflect.TypeOf((*MockPvzRepo)(nil).GetReceptionByID), ctx, id)
}

// HasActiveReception mocks base method.
func (m *MockPvzRepo) HasActiveReception(ctx context.Context, pvzID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasActiveReception", ctx, pvzID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasActiveReception indicates an expected call of HasActiveReception.
func (mr *MockPvzRepoMockRecorder) HasActiveReception(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasActiveReception", reflect.TypeOf((*MockPvzRepo)(nil).HasActiveReception), ctx, pvzID)
}

// InsertProduct mocks base method.
func (m *MockPvzRepo) InsertProduct(ctx context.Context, product models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockPvzRepoMockRecorder) InsertProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockPvzRepo)(nil).InsertProduct), ctx, product)
}

// InsertPvz mocks base method.
func (m *MockPvzRepo) InsertPvz(ctx context.Context, pvz models.PVZ) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPvz", ctx, pvz)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPvz indicates an expected call of InsertPvz.
func (mr *MockPvzRepoMockRecorder) InsertPvz(ctx, pvz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPvz", reflect.TypeOf((*MockPvzRepo)(nil).InsertPvz), ctx, pvz)
}

// InsertReception mocks base method.
func (m *MockPvzRepo) InsertReception(ctx context.Context, reception models.Reception) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertReception", ctx, reception)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertReception indicates an expected call of InsertReception.
func (mr *MockPvzRepoMockRecorder) InsertReception(ctx, reception interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertReception", reflect.TypeOf((*MockPvzRepo)(nil).InsertReception), ctx, reception)
}

// UpdateReceptionStatus mocks base method.
func (m *MockPvzRepo) UpdateReceptionStatus(ctx context.Context, id uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReceptionStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReceptionStatus indicates an expected call of UpdateReceptionStatus.
func (mr *MockPvzRepoMockRecorder) UpdateReceptionStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReceptionStatus", reflect.TypeOf((*MockPvzRepo)(nil).UpdateReceptionStatus), ctx, id, status)
}

// MockPvzUsecase is a mock of PvzUsecase interface.
type MockPvzUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPvzUsecaseMockRecorder
}

// MockPvzUsecaseMockRecorder is the mock recorder for MockPvzUsecase.
type MockPvzUsecaseMockRecorder struct {
	mock *MockPvzUsecase
}

// NewMockPvzUsecase creates a new mock instance.
func NewMockPvzUsecase(ctrl *gomock.Controller) *MockPvzUsecase {
	mock := &MockPvzUsecase{ctrl: ctrl}
	mock.recorder = &MockPvzUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPvzUsecase) EXPECT() *MockPvzUsecaseMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockPvzUsecase) AddProduct(ctx context.Context, pvzID uuid.UUID, productType string) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, pvzID, productType)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockPvzUsecaseMockRecorder) AddProduct(ctx, pvzID, productType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockPvzUsecase)(nil).AddProduct), ctx, pvzID, productType)
}

// CloseReception mocks base method.
func (m *MockPvzUsecase) CloseReception(ctx context.Context, receptionID uuid.UUID) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseReception", ctx, receptionID)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseReception indicates an expected call of CloseReception.
func (mr *MockPvzUsecaseMockRecorder) CloseReception(ctx, receptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseReception", reflect.TypeOf((*MockPvzUsecase)(nil).CloseReception), ctx, receptionID)
}

// CreatePvz mocks base method.
func (m *MockPvzUsecase) CreatePvz(ctx context.Context, pvz models.PVZ) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePvz", ctx, pvz)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePvz indicates an expected call of CreatePvz.
func (mr *MockPvzUsecaseMockRecorder) CreatePvz(ctx, pvz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePvz", reflect.TypeOf((*MockPvzUsecase)(nil).CreatePvz), ctx, pvz)
}

// CreateReception mocks base method.
func (m *MockPvzUsecase) CreateReception(ctx context.Context, PvzId uuid.UUID) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, PvzId)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockPvzUsecaseMockRecorder) CreateReception(ctx, PvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockPvzUsecase)(nil).CreateReception), ctx, PvzId)
}

// DeleteProduct mocks base method.
func (m *MockPvzUsecase) DeleteProduct(ctx context.Context, pvzID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, pvzID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockPvzUsecaseMockRecorder) DeleteProduct(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockPvzUsecase)(nil).DeleteProduct), ctx, pvzID)
}

// GetPvz mocks base method.
func (m *MockPvzUsecase) GetPvz(ctx context.Context, startDate, endDate *time.Time, page, limit int) ([]models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvz", ctx, startDate, endDate, page, limit)
	ret0, _ := ret[0].([]models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvz indicates an expected call of GetPvz.
func (mr *MockPvzUsecaseMockRecorder) GetPvz(ctx, startDate, endDate, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvz", reflect.TypeOf((*MockPvzUsecase)(nil).GetPvz), ctx, startDate, endDate, page, limit)
}
